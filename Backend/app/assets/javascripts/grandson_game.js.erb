GameClient.GFG.GrandsonGame = function(game){};
GameClient.GFG.GrandsonGame.prototype = {
  // Color dictionary
  colors: {
    "blue": 0,
    "yellow": 1,
    "green": 2,
    "red": 3,
    "purple": 4
  },

  // switch state dictionary
  switchState: {
    "left": false,
    "right": true
  },

  // relative coordinates of buttons on monitor
  buttonCoordinates: [
    [6, 20],
    [6, 40],
    [6, 60],
    [252, 20],
    [252, 40],
    [252, 60],
    [25, 204],
    [50, 204],
    [75, 204],
    [185, 204],
    [205, 204],
    [230, 204]
  ],

  // relative coordinates of switches on tower
  switchCoordinates: [
    [35, 160],
    [35, 210]
  ],

  // relative coordinates of round buttons on tower
  dummyRoundButtonsCoordinates: [
    [19, 133],
    [42, 133]
  ],

  // relative coordinates of square buttons on tower
  dummySquareButtonsCoordinates: [
    [12, 12],
    [32, 12]
  ],

  // relative coordinates of ports on tower
  portCoordinates: [
    [83, 133],
    [83, 107],
    [83, 81],
    [83, 55]
  ],

  // coordinates of monitors on screen
  monitorCoordinates: [
    [95, 106],
    [462, 106],
    [830, 106]
  ],

  // coordinates of towers on screen
  towerCoordinates: [
    [165, 407],
    [533, 407],
    [900, 407]
  ],

  // descriptions for useless ports on tower
  portDescriptions: [
    "Coaxial Port",
    "WiFi Port",
    "Laser Communication Port",
    "Cellular Network Bus",
    "IBS Port",
    "GBS Port",
    "PDA Port",
    "YOSPOS Interface Connector",
    "NOTIM Port (ED variety)",
    "NOTIM Port (ANT variety)",
    "Over/Under Port",
    "VR Port",
    "Washing machine interface"
  ],

  // descriptions for the useless button on monitor
  buttonDescriptions: [
    "Color Enhancer",
    "Widescreen Emulator",
    "HDifier Toggle",
    "Invert Colors",
    "Nothing",
    "Auto Contrast",
    "Toggle mirror",
    "Open hidden stash",
    "Change aspect ratio",
    "Self-destruct",
    "Zen mode"
  ],

  // load input data JSON
  init: function(inputData) {
    this.data = inputData;
  },

  preload: function(){
    // load up assets
    this.game.load.image('background', "<%= asset_path 'grandson/bg.png'%>");
    this.game.load.image('port', "<%= asset_path 'grandson/port.png'%>");
    this.game.load.image('monitor', "<%= asset_path 'grandson/monitor.png'%>");
    this.game.load.image('tower', "<%= asset_path 'grandson/tower.png'%>");
    this.game.load.image('didit', "<%= asset_path 'didit.png'%>");
    this.game.load.image('didit_1', "<%= asset_path 'didit_1.png'%>");

    this.game.load.spritesheet('roundButtons', "<%= asset_path 'grandson/roundButtons.png'%>", 16, 16);
    this.game.load.spritesheet('squareButtons', "<%= asset_path 'grandson/squareButtons.png'%>", 16, 6);
    this.game.load.spritesheet('cableIcons', "<%= asset_path 'grandson/cable_icons.png'%>", 35, 53);
    this.game.load.spritesheet('switch', "<%= asset_path 'grandson/switch.png'%>", 40, 35);
    this.game.load.spritesheet('bubble', "<%= asset_path 'grandson/bubble.png'%>", 343, 289);

    this.game.load.audio('horns', ["<%= asset_path 'sound/horns.ogg'%>", "<%= asset_path 'sound/horns.mp3'%>"]);
    this.game.load.audio('sadhorn', ["<%= asset_path 'sound/sadhorn.ogg'%>", "<%= asset_path 'sound/sadhorn.mp3'%>"]);
  },

  create: function(){

    // add background and empty group for popups
    this.background = this.game.add.sprite(0, 0, 'background');
    this.game.labels = this.game.add.group();

    //generate monitors
    this.monitors = this.game.add.group();
    for(var i=0;i<this.data.monitors.length;i++){
      var coords = this.monitorCoordinates[i];
      var monitor = new GameClient.SmallMonitor(this, this.game, coords[0], coords[1], this.monitors, this.data.monitors[i]);
    }
    // generate towers
    this.towers = this.game.add.group();
    for(var i=0;i<this.data.monitors.length;i++){
      var coords = this.towerCoordinates[i];
      var monitor = new GameClient.SmallTower(this, this.game, coords[0], coords[1], this.towers, this.data.towers[i]);
    }

    // make labels render on top of everything else
    this.game.world.bringToTop(this.game.labels);

  },

  update: function(){
    // nothing to do here
  },

  render: function(){
    // nothing to do here
  },

  // alternative = true to get slightly different "ending" (if grandpa lost)
  triggerWin: function(alternative){
    // set game as over
    this.over = true;
    // disable input
    this.game.input.mouse.enabled = false;

    // fanfare, or not.
    var key = alternative ? 'sadhorn' : 'horns';
    this.winSfx = this.game.add.audio(key);
    this.winSfx.play();

    // winning message, or not.
    var key = alternative ? 'didit_1' : 'didit';
    this.overlay = this.game.add.sprite(0, 0, key);
    this.overlay.alpha = 0;
    var tween = this.game.add.tween(this.overlay).to({alpha: 1}, 1000, "Linear", true);
  },
}
